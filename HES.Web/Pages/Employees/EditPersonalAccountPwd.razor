@inherits HESModalBase

@if (!Initialized)
{
    <Loader />
}
else
{
    if (EntityBeingEdited)
    {
        <EditedByAnother EntityName="@Account.Name" CloseAction="ModalDialogCancel" />
    }
    else
    {
        @if (IsActiveDirectoryAccount)
        {
            <div class="btn-group w-100 mb-3" role="group">
                <input type="radio" class="btn-check" name="btnradio" id="enterPwd" autocomplete="off" checked @onclick="@(() => { Tab = PasswordTab.Enter; })" />
                <label class="btn btn-outline-primary" for="enterPwd">@Resource.Label_EnterPwd</label>
                <input type="radio" class="btn-check" name="btnradio" id="genaratePwd" autocomplete="off" @onclick="@(() => { Tab = PasswordTab.Generate; })" />
                <label class="btn btn-outline-primary" for="genaratePwd">@Resource.Label_GeneratePwd</label>
            </div>
        }
        switch (Tab)
        {
            case PasswordTab.Enter:
                <EditForm Model="AccountPassword" OnValidSubmit="EditAccountPasswordAsync">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <h5 class="text-navyblue">@Account.Name</h5>
                    </div>
                    <div class="form-group">
                        <Label For="@(() => AccountPassword.Password)" class="text-gray" />
                        <InputText @bind-Value="AccountPassword.Password" type="password" class="form-control text-navyblue" />
                        <ValidationMessage For="@(() => AccountPassword.Password)" class="text-danger" />
                    </div>
                    <div class="form-group">
                        <Label For="@(() => AccountPassword.ConfirmPassword)" class="text-gray" />
                        <InputText @bind-Value="AccountPassword.ConfirmPassword" type="password" class="form-control text-navyblue" />
                        <ValidationMessage For="@(() => AccountPassword.ConfirmPassword)" class="text-danger" />
                    </div>
                    <div class="form-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ModalDialogCancel">@Resource.Btn_Cancel</button>
                        <Button @ref="ButtonSpinner" Text="@Resource.Btn_Save" type="submit" class="btn btn-primary" />
                    </div>
                </EditForm>
                break;
            case PasswordTab.Generate:
                <h5>@Resource.EmployeeDetails_EditPersonalAccountPwd_CryptographicStrength</h5>
                <ul>
                    <li>@string.Format(Resource.EmployeeDetails_EditPersonalAccountPwd_Length, 16)</li>
                    <li>@Resource.EmployeeDetails_EditPersonalAccountPwd_IsUpperCase</li>
                    <li>@Resource.EmployeeDetails_EditPersonalAccountPwd_IsLowerCase</li>
                    <li>@Resource.EmployeeDetails_EditPersonalAccountPwd_IsSpecChar</li>
                    <li>@Resource.EmployeeDetails_EditPersonalAccountPwd_IsNumeric</li>
                </ul>
                <div class="form-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ModalDialogCancel">@Resource.Btn_Cancel</button>
                    <Button Text="@Resource.Btn_Generate" OnClick="GenerateAccountPasswordAsync" class="btn btn-primary" />
                </div>
                break;
        }
    }
}